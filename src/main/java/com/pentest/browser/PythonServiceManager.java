package com.pentest.browser;

import java.io.*;
import java.nio.file.*;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.util.List;

public class PythonServiceManager {
    private static final String PYTHON_DIR = "python";
    private static final String VENV_DIR = "venv";
    private static final int SERVICE_START_TIMEOUT = 30; // seconds
    private Process pythonProcess;
    private final Path workingDir;
    
    public PythonServiceManager(Path workingDir) {
        this.workingDir = workingDir;
    }
    
    public void startService() throws IOException {
        // Create working directory if it doesn't exist
        Files.createDirectories(workingDir);
        
        // Extract Python resources
        extractPythonResources();
        
        // Setup Python environment
        setupPythonEnvironment();
        
        // Start the service
        startPythonService();
    }
    
    private void extractPythonResources() throws IOException {
        Path pythonDir = workingDir.resolve(PYTHON_DIR);
        Files.createDirectories(pythonDir);
        
        // Extract Python files from resources
        copyResourceFile("/python/graphrag_service.py", pythonDir.resolve("graphrag_service.py"));
        copyResourceFile("/python/requirements.txt", pythonDir.resolve("requirements.txt"));
    }
    
    private void copyResourceFile(String resourcePath, Path targetPath) throws IOException {
        try (InputStream is = getClass().getResourceAsStream(resourcePath)) {
            if (is == null) {
                throw new IOException("Resource not found: " + resourcePath);
            }
            Files.copy(is, targetPath, StandardCopyOption.REPLACE_EXISTING);
        }
    }
    
    private void setupPythonEnvironment() throws IOException {
        Path pythonDir = workingDir.resolve(PYTHON_DIR);
        Path venvDir = pythonDir.resolve(VENV_DIR);
        
        // Create virtual environment if it doesn't exist
        if (!Files.exists(venvDir)) {
            ProcessBuilder pb = new ProcessBuilder();
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                pb.command("python", "-m", "venv", venvDir.toString());
            } else {
                pb.command("python3", "-m", "venv", venvDir.toString());
            }
            pb.directory(pythonDir.toFile());
            Process process = pb.start();
            try {
                if (!process.waitFor(60, TimeUnit.SECONDS)) {
                    process.destroyForcibly();
                    throw new IOException("Timeout while creating virtual environment");
                }
                if (process.exitValue() != 0) {
                    throw new IOException("Failed to create virtual environment");
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new IOException("Interrupted while creating virtual environment", e);
            }
        }
        
        // Install requirements
        ProcessBuilder pb = new ProcessBuilder();
        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            pb.command(venvDir.resolve("Scripts/pip").toString(), "install", "-r", "requirements.txt");
        } else {
            pb.command(venvDir.resolve("bin/pip").toString(), "install", "-r", "requirements.txt");
        }
        pb.directory(pythonDir.toFile());
        Process process = pb.start();
        try {
            if (!process.waitFor(300, TimeUnit.SECONDS)) { // 5 minutes timeout
                process.destroyForcibly();
                throw new IOException("Timeout while installing Python dependencies");
            }
            if (process.exitValue() != 0) {
                throw new IOException("Failed to install Python dependencies");
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IOException("Interrupted while installing Python dependencies", e);
        }
    }
    
    private void startPythonService() throws IOException {
        Path pythonDir = workingDir.resolve(PYTHON_DIR);
        Path venvDir = pythonDir.resolve(VENV_DIR);
        
        // Build command to run Python service
        List<String> command = new ArrayList<>();
        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            command.add(venvDir.resolve("Scripts/python").toString());
        } else {
            command.add(venvDir.resolve("bin/python").toString());
        }
        command.add("graphrag_service.py");
        
        // Start the service
        ProcessBuilder pb = new ProcessBuilder(command);
        pb.directory(pythonDir.toFile());
        
        // Set GEMINI_API_KEY environment variable
        pb.environment().put("GEMINI_API_KEY", System.getenv("GEMINI_API_KEY"));
        
        // Redirect output to files
        pb.redirectOutput(new File(pythonDir.resolve("service.log").toString()));
        pb.redirectError(new File(pythonDir.resolve("service.error.log").toString()));
        
        pythonProcess = pb.start();
        
        // Wait for service to start
        waitForServiceStart();
    }
    
    private void waitForServiceStart() throws IOException {
        long startTime = System.currentTimeMillis();
        while (System.currentTimeMillis() - startTime < SERVICE_START_TIMEOUT * 1000) {
            try {
                // Try to connect to the service
                java.net.Socket socket = new java.net.Socket("localhost", 8000);
                socket.close();
                return; // Service is up
            } catch (IOException e) {
                // Service not up yet, wait a bit
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new IOException("Interrupted while waiting for service to start");
                }
            }
        }
        throw new IOException("Timeout waiting for Python service to start");
    }
    
    public void stopService() {
        if (pythonProcess != null && pythonProcess.isAlive()) {
            pythonProcess.destroy();
            try {
                if (!pythonProcess.waitFor(10, TimeUnit.SECONDS)) {
                    pythonProcess.destroyForcibly();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                pythonProcess.destroyForcibly();
            }
        }
    }
} 