package com.pentest.browser;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.deeplearning4j.models.embeddings.loader.WordVectorSerializer;
import org.deeplearning4j.models.word2vec.Word2Vec;
import org.deeplearning4j.text.sentenceiterator.BasicLineIterator;
import org.deeplearning4j.text.tokenization.tokenizer.preprocessor.CommonPreprocessor;
import org.deeplearning4j.text.tokenization.tokenizerfactory.DefaultTokenizerFactory;
import org.deeplearning4j.text.tokenization.tokenizerfactory.TokenizerFactory;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;
import java.io.File;
import java.io.StringReader;
import java.io.FileWriter;

public class GeminiEmbeddingService {
    private final String apiKey;
    private final String model;
    private final Word2Vec word2Vec;
    private final TokenizerFactory tokenizerFactory;
    private final ExecutorService executorService;
    
    public GeminiEmbeddingService(String apiKey, String model) {
        this.apiKey = apiKey;
        this.model = model;
        this.executorService = Executors.newFixedThreadPool(4);
        
        // Initialize tokenizer
        this.tokenizerFactory = new DefaultTokenizerFactory();
        this.tokenizerFactory.setTokenPreProcessor(new CommonPreprocessor());
        
        // Initialize or load Word2Vec model
        File modelFile = new File("word2vec.model");
        if (modelFile.exists()) {
            this.word2Vec = WordVectorSerializer.readWord2VecModel(modelFile);
        } else {
            // Create a new model with default parameters
            this.word2Vec = new Word2Vec.Builder()
                .minWordFrequency(1)
                .iterations(5)
                .layerSize(100)
                .seed(42)
                .windowSize(5)
                .tokenizerFactory(tokenizerFactory)
                .build();
        }
    }
    
    public CompletableFuture<float[]> getEmbedding(String text) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // Tokenize and preprocess the text
                List<String> tokens = tokenizerFactory.create(text).getTokens();
                
                // Get embeddings for each token
                INDArray embeddings = Nd4j.zeros(tokens.size(), word2Vec.getLayerSize());
                for (int i = 0; i < tokens.size(); i++) {
                    String token = tokens.get(i);
                    if (word2Vec.hasWord(token)) {
                        embeddings.putRow(i, word2Vec.getWordVectorMatrix(token));
                    }
                }
                
                // Average the embeddings
                INDArray meanEmbedding = embeddings.mean(0);
                
                // Convert to float array
                float[] result = new float[word2Vec.getLayerSize()];
                for (int i = 0; i < result.length; i++) {
                    result[i] = meanEmbedding.getFloat(i);
                }
                return result;
            } catch (Exception e) {
                throw new RuntimeException("Error generating embedding: " + e.getMessage(), e);
            }
        }, executorService);
    }
    
    public void updateModel(String text) {
        try {
            // Create a temporary file with the text
            File tempFile = File.createTempFile("word2vec_update", ".txt");
            tempFile.deleteOnExit();
            
            // Write the text to the file
            try (FileWriter writer = new FileWriter(tempFile)) {
                writer.write(text);
            }
            
            // Create a line iterator from the file
            BasicLineIterator iterator = new BasicLineIterator(tempFile);
            
            // Fit the model on new text
            word2Vec.setTokenizerFactory(tokenizerFactory);
            word2Vec.fit();
            
            // Save the updated model
            WordVectorSerializer.writeWord2VecModel(word2Vec, "word2vec.model");
            
            // Clean up
            tempFile.delete();
        } catch (Exception e) {
            throw new RuntimeException("Error updating model: " + e.getMessage(), e);
        }
    }
    
    public void shutdown() {
        executorService.shutdown();
    }
} 