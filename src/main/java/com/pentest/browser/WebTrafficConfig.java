package com.pentest.browser;

import java.util.ArrayList;
import java.util.List;

public class WebTrafficConfig {
    private boolean includeRequests;
    private boolean includeResponses;
    private String targetDomain;
    private List<String> subdomains;
    private boolean flushData;
    private long maxTokens;
    private boolean includeAllSubdomains;
    
    public WebTrafficConfig() {
        this.includeRequests = true;
        this.includeResponses = true;
        this.subdomains = new ArrayList<>();
        this.flushData = false;
        this.maxTokens = 2000000; // Default to 2M tokens
        this.includeAllSubdomains = false;
    }
    
    // Getters and setters
    public boolean isIncludeRequests() {
        return includeRequests;
    }
    
    public void setIncludeRequests(boolean includeRequests) {
        this.includeRequests = includeRequests;
    }
    
    public boolean isIncludeResponses() {
        return includeResponses;
    }
    
    public void setIncludeResponses(boolean includeResponses) {
        this.includeResponses = includeResponses;
    }
    
    public String getTargetDomain() {
        return targetDomain;
    }
    
    public void setTargetDomain(String targetDomain) {
        this.targetDomain = targetDomain;
    }
    
    public List<String> getSubdomains() {
        return new ArrayList<>(subdomains);
    }
    
    public void setSubdomains(List<String> subdomains) {
        this.subdomains = new ArrayList<>(subdomains);
    }
    
    public void addSubdomain(String subdomain) {
        if (!this.subdomains.contains(subdomain)) {
            this.subdomains.add(subdomain);
        }
    }
    
    public boolean isFlushData() {
        return flushData;
    }
    
    public void setFlushData(boolean flushData) {
        this.flushData = flushData;
    }
    
    public long getMaxTokens() {
        return maxTokens;
    }
    
    public void setMaxTokens(long maxTokens) {
        this.maxTokens = maxTokens;
    }
    
    public boolean isIncludeAllSubdomains() {
        return includeAllSubdomains;
    }
    
    public void setIncludeAllSubdomains(boolean includeAllSubdomains) {
        this.includeAllSubdomains = includeAllSubdomains;
    }
    
    public boolean isDomainAllowed(String domain) {
        if (targetDomain == null || targetDomain.isEmpty()) {
            return true; // If no target domain is set, allow all
        }
        
        domain = domain.toLowerCase();
        String targetLower = targetDomain.toLowerCase();
        
        if (domain.equals(targetLower)) {
            return true;
        }
        
        // If includeAllSubdomains is true, allow any subdomain of target
        if (includeAllSubdomains && domain.endsWith("." + targetLower)) {
            return true;
        }
        
        // Check specific subdomains if not using includeAllSubdomains
        for (String subdomain : subdomains) {
            if (domain.equals(subdomain.toLowerCase())) {
                return true;
            }
        }
        
        return false;
    }
} 