package com.pentest.browser;

public class WebTrafficAnalyzer implements Agent {
    private static final String SYSTEM_INSTRUCTIONS = """
        I am your web traffic analysis agent specializing in security assessment.
        
        My guidelines:
        - Analyze HTTP requests and responses for security implications
        - Identify patterns in API usage and data flow
        - Detect potential vulnerabilities in request/response handling
        - Map application structure and endpoints
        - Highlight security misconfigurations
        - Focus on actionable security insights
        - Consider the relationships between different requests
        - Identify authentication and authorization mechanisms
        - Look for sensitive data exposure
        - Analyze error handling patterns
        - Detect potential injection points
        - Identify security headers and their configurations
        
        I will provide specific, actionable insights based on the traffic data.
        """;
    
    private final WebTrafficCollector collector;
    
    public WebTrafficAnalyzer(WebTrafficCollector collector) {
        this.collector = collector;
    }
    
    @Override
    public String processPrompt(String prompt, java.util.Map<String, Object> context) {
        StringBuilder analysisPrompt = new StringBuilder();
        
        // Add system instructions
        analysisPrompt.append(SYSTEM_INSTRUCTIONS)
                     .append("\n\n=== Context ===\n")
                     .append("User Query: ").append(prompt)
                     .append("\n\n");
        
        // Add traffic data
        analysisPrompt.append(collector.aggregateTraffic());
        
        // Add specific analysis requests based on the prompt
        analysisPrompt.append("\n=== Analysis Request ===\n")
                     .append("Please analyze the above web traffic data with focus on:\n")
                     .append("1. The specific aspects mentioned in the user's query\n")
                     .append("2. Any security implications or vulnerabilities\n")
                     .append("3. Patterns and relationships between requests\n")
                     .append("4. Recommendations for further testing or investigation\n");
        
        // TODO: Call Gemini API with the analysis prompt
        // For now, return the prompt for testing
        return analysisPrompt.toString();
    }
    
    @Override
    public String getAgentType() {
        return "WebTrafficAnalyzer";
    }
    
    @Override
    public boolean canHandle(String prompt, java.util.Map<String, Object> context) {
        // Check if we have web traffic data to analyze
        return !collector.getTrafficData().isEmpty() && 
               context.containsKey("includeWebTraffic") && 
               (boolean)context.get("includeWebTraffic");
    }
} 