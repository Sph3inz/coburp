package com.pentest.browser;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.ByteBuffer;
import java.util.Arrays;

/**
 * Minimal MJPEG AVI writer that writes a video file from JPEG frames.
 * This implementation builds a bareâ€‘bones AVI file with a single MJPEG video stream.
 */
public class MJPEGAVIWriter implements AutoCloseable {
    private static final int RIFF_MAGIC = 0x46464952; // "RIFF"
    private static final int AVI_MAGIC = 0x20495641; // "AVI "
    private static final int LIST_MAGIC = 0x5453494C; // "LIST"
    private static final int HDRL_MAGIC = 0x6C726468; // "hdrl"
    private static final int AVIH_MAGIC = 0x68697661; // "avih"
    private static final int STRL_MAGIC = 0x6C727473; // "strl"
    private static final int STRH_MAGIC = 0x68727473; // "strh"
    private static final int STRF_MAGIC = 0x66727473; // "strf"
    private static final int MOVI_MAGIC = 0x69766F6D; // "movi"
    private static final int VIDS_MAGIC = 0x73646976; // "vids"
    private static final int MJPG_MAGIC = 0x47504A4D; // "MJPG"
    private static final int IDX1_MAGIC = 0x31786469; // "idx1"

    private final RandomAccessFile out;
    private final int width;
    private final int height;
    private final int frameRate;
    private int frameCount;
    private long moviListOffset;
    private ByteArrayOutputStream indexBuffer;

    public MJPEGAVIWriter(String filename, int width, int height, int frameRate) throws IOException {
        this.width = width;
        this.height = height;
        this.frameRate = frameRate;
        this.frameCount = 0;
        this.indexBuffer = new ByteArrayOutputStream();
        
        out = new RandomAccessFile(filename, "rw");
        writeHeader();
    }

    private void writeInt(int value) throws IOException {
        out.write(value & 0xFF);
        out.write((value >> 8) & 0xFF);
        out.write((value >> 16) & 0xFF);
        out.write((value >> 24) & 0xFF);
    }

    private void writeShort(int value) throws IOException {
        out.write(value & 0xFF);
        out.write((value >> 8) & 0xFF);
    }

    private void writeHeader() throws IOException {
        // RIFF AVI header
        writeInt(RIFF_MAGIC);
        writeInt(0); // File size (updated later)
        writeInt(AVI_MAGIC);

        // LIST hdrl
        writeInt(LIST_MAGIC);
        writeInt(192); // List size
        writeInt(HDRL_MAGIC);

        // AVI Header
        writeInt(AVIH_MAGIC);
        writeInt(56); // Header size
        writeInt(1000000 / frameRate); // Microseconds per frame
        writeInt(0); // Max bytes per second
        writeInt(0); // Padding
        writeInt(0x10); // Flags (AVIF_HASINDEX)
        writeInt(0); // Total frames (updated later)
        writeInt(0); // Initial frames
        writeInt(1); // Number of streams
        writeInt(0); // Suggested buffer size
        writeInt(width); // Width
        writeInt(height); // Height
        writeInt(0); // Reserved[4]
        writeInt(0);
        writeInt(0);
        writeInt(0);

        // LIST strl
        writeInt(LIST_MAGIC);
        writeInt(116); // List size
        writeInt(STRL_MAGIC);

        // Stream header
        writeInt(STRH_MAGIC);
        writeInt(56); // Header size
        writeInt(VIDS_MAGIC); // Stream type
        writeInt(MJPG_MAGIC); // Stream handler
        writeInt(0); // Flags
        writeInt(0); // Priority & language
        writeInt(0); // Initial frames
        writeInt(1); // Scale
        writeInt(frameRate); // Rate
        writeInt(0); // Start
        writeInt(0); // Length (updated later)
        writeInt(0); // Suggested buffer size
        writeInt(-1); // Quality
        writeInt(0); // Sample size
        writeShort(0); // Frame left
        writeShort(0); // Frame top
        writeShort(width); // Frame right
        writeShort(height); // Frame bottom

        // Stream format
        writeInt(STRF_MAGIC);
        writeInt(40); // Format size
        writeInt(40); // Size of structure
        writeInt(width); // Width
        writeInt(height); // Height
        writeShort(1); // Planes
        writeShort(24); // Bit count
        writeInt(MJPG_MAGIC); // Compression
        writeInt(width * height * 3); // Image size
        writeInt(0); // X pixels per meter
        writeInt(0); // Y pixels per meter
        writeInt(0); // Colors used
        writeInt(0); // Colors important

        // LIST movi
        writeInt(LIST_MAGIC);
        writeInt(0); // List size (updated later)
        writeInt(MOVI_MAGIC);
        moviListOffset = out.getFilePointer() - 4;
    }

    public void addFrame(BufferedImage image) throws IOException {
        ByteArrayOutputStream jpegStream = new ByteArrayOutputStream();
        ImageIO.write(image, "jpg", jpegStream);
        byte[] jpegData = jpegStream.toByteArray();

        long frameOffset = out.getFilePointer() - moviListOffset - 4;
        writeInt(0x63643030); // "00dc"
        writeInt(jpegData.length); // Chunk size
        out.write(jpegData);
        if ((jpegData.length & 1) == 1) {
            out.write(0); // Padding
        }

        // Write index entry
        byte[] idx = new byte[16];
        System.arraycopy(ByteBuffer.allocate(4).putInt(0x63643030).array(), 0, idx, 0, 4);
        System.arraycopy(ByteBuffer.allocate(4).putInt(0x10).array(), 0, idx, 4, 4);
        System.arraycopy(ByteBuffer.allocate(4).putInt((int)frameOffset).array(), 0, idx, 8, 4);
        System.arraycopy(ByteBuffer.allocate(4).putInt(jpegData.length).array(), 0, idx, 12, 4);
        indexBuffer.write(idx);

        frameCount++;
    }

    @Override
    public void close() throws IOException {
        long endPos = out.getFilePointer();

        // Write index
        writeInt(IDX1_MAGIC);
        byte[] indexData = indexBuffer.toByteArray();
        writeInt(indexData.length);
        out.write(indexData);

        // Update RIFF size
        out.seek(4);
        writeInt((int)(out.length() - 8));

        // Update frame count
        out.seek(48);
        writeInt(frameCount);

        // Update stream length
        out.seek(140);
        writeInt(frameCount);

        // Update movi list size
        out.seek(moviListOffset);
        writeInt((int)(endPos - (moviListOffset + 4)));

        out.close();
    }
} 