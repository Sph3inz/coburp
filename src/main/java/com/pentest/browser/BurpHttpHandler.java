package com.pentest.browser;

import burp.api.montoya.http.handler.*;
import burp.api.montoya.http.message.*;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.core.ByteArray;
import java.util.Map;
import java.util.HashMap;
import java.nio.charset.StandardCharsets;

public class BurpHttpHandler implements HttpHandler {
    private final WebTrafficCollector collector;
    
    public BurpHttpHandler(WebTrafficCollector collector) {
        this.collector = collector;
    }
    
    @Override
    public RequestToBeSentAction handleHttpRequestToBeSent(HttpRequestToBeSent requestToBeSent) {
        // Continue with the request as normal
        return RequestToBeSentAction.continueWith(requestToBeSent);
    }
    
    @Override
    public ResponseReceivedAction handleHttpResponseReceived(HttpResponseReceived responseReceived) {
        try {
            // Create HttpRequestResponse object
            HttpRequestResponse traffic = new HttpRequestResponse();
            
            // Process request
            HttpRequest request = responseReceived.initiatingRequest();
            traffic.setMethod(request.method());
            traffic.setUrl(request.url());
            
            // Process request headers
            request.headers().forEach(header -> 
                traffic.addRequestHeader(header.name(), header.value()));
            
            // Process request body if present
            if (request.body().length() > 0) {
                traffic.setRequestBody(request.body().toString());
            }
            
            // Process response
            traffic.setStatusCode(responseReceived.statusCode());
            
            // Process response headers
            responseReceived.headers().forEach(header -> 
                traffic.addResponseHeader(header.name(), header.value()));
            
            // Process response body if present
            if (responseReceived.body().length() > 0) {
                traffic.setResponseBody(responseReceived.body().toString());
            }
            
            // Send to collector
            collector.captureTraffic(traffic);
            
        } catch (Exception e) {
            // Log error but don't interrupt normal request flow
            System.err.println("Error processing HTTP traffic: " + e.getMessage());
        }
        
        // Continue with the response as normal
        return ResponseReceivedAction.continueWith(responseReceived);
    }
} 