package com.pentest.browser;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;

public class GraphRAGClient {
    private final String baseUrl;
    private final HttpClient client;
    private final ObjectMapper objectMapper;
    
    public static class GraphRAGResult {
        private final String response;
        private final List<String> references;
        
        public GraphRAGResult(String response, List<String> references) {
            this.response = response;
            this.references = references;
        }
        
        public String getResponse() { return response; }
        public List<String> getReferences() { return references; }
    }
    
    public GraphRAGClient(String baseUrl) {
        this.baseUrl = baseUrl;
        this.client = HttpClient.newBuilder()
            .version(HttpClient.Version.HTTP_1_1)
            .connectTimeout(Duration.ofSeconds(10))
            .build();
        this.objectMapper = new ObjectMapper();
    }
    
    public CompletableFuture<Void> insertContent(String content, Map<String, Object> metadata) {
        return CompletableFuture.runAsync(() -> {
            try {
                Map<String, Object> requestBody = Map.of(
                    "content", content,
                    "metadata", metadata
                );
                
                String jsonBody = objectMapper.writeValueAsString(requestBody);
                
                HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/insert"))
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                    .build();
                
                HttpResponse<String> response = client.send(request, 
                    HttpResponse.BodyHandlers.ofString());
                
                if (response.statusCode() != 200) {
                    throw new RuntimeException("Failed to insert content: " + response.body());
                }
            } catch (Exception e) {
                throw new RuntimeException("Error inserting content: " + e.getMessage(), e);
            }
        });
    }
    
    public CompletableFuture<GraphRAGResult> queryGraphRAG(String query) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                Map<String, String> requestBody = Map.of("query", query);
                String jsonBody = objectMapper.writeValueAsString(requestBody);
                
                HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/query"))
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                    .build();
                
                HttpResponse<String> response = client.send(request, 
                    HttpResponse.BodyHandlers.ofString());
                
                if (response.statusCode() != 200) {
                    throw new RuntimeException("Failed to query GraphRAG: " + response.body());
                }
                
                Map<String, Object> result = objectMapper.readValue(response.body(), 
                    new TypeReference<Map<String, Object>>() {});
                
                return new GraphRAGResult(
                    (String) result.get("response"),
                    (List<String>) result.get("references")
                );
            } catch (Exception e) {
                throw new RuntimeException("Error querying GraphRAG: " + e.getMessage(), e);
            }
        });
    }
} 