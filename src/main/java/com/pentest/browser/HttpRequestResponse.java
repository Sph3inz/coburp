package com.pentest.browser;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

public class HttpRequestResponse {
    private String method;
    private String url;
    private Map<String, String> requestHeaders;
    private String requestBody;
    private int statusCode;
    private Map<String, String> responseHeaders;
    private String responseBody;
    private Instant timestamp;
    private long requestTokens;
    private long responseTokens;
    
    public HttpRequestResponse() {
        this.requestHeaders = new HashMap<>();
        this.responseHeaders = new HashMap<>();
        this.timestamp = Instant.now();
    }
    
    // Getters and setters
    public String getMethod() {
        return method;
    }
    
    public void setMethod(String method) {
        this.method = method;
    }
    
    public String getUrl() {
        return url;
    }
    
    public void setUrl(String url) {
        this.url = url;
    }
    
    public Map<String, String> getRequestHeaders() {
        return new HashMap<>(requestHeaders);
    }
    
    public void setRequestHeaders(Map<String, String> requestHeaders) {
        this.requestHeaders = new HashMap<>(requestHeaders);
    }
    
    public void addRequestHeader(String name, String value) {
        this.requestHeaders.put(name, value);
    }
    
    public String getRequestBody() {
        return requestBody;
    }
    
    public void setRequestBody(String requestBody) {
        this.requestBody = requestBody;
        // Rough estimation of tokens (1 token ≈ 4 characters)
        this.requestTokens = requestBody != null ? requestBody.length() / 4 : 0;
    }
    
    public int getStatusCode() {
        return statusCode;
    }
    
    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }
    
    public Map<String, String> getResponseHeaders() {
        return new HashMap<>(responseHeaders);
    }
    
    public void setResponseHeaders(Map<String, String> responseHeaders) {
        this.responseHeaders = new HashMap<>(responseHeaders);
    }
    
    public void addResponseHeader(String name, String value) {
        this.responseHeaders.put(name, value);
    }
    
    public String getResponseBody() {
        return responseBody;
    }
    
    public void setResponseBody(String responseBody) {
        this.responseBody = responseBody;
        // Rough estimation of tokens (1 token ≈ 4 characters)
        this.responseTokens = responseBody != null ? responseBody.length() / 4 : 0;
    }
    
    public Instant getTimestamp() {
        return timestamp;
    }
    
    public long getTotalTokens() {
        return requestTokens + responseTokens;
    }
    
    public String getDomain() {
        if (url == null) return null;
        try {
            java.net.URL urlObj = new java.net.URL(url);
            return urlObj.getHost().toLowerCase();
        } catch (java.net.MalformedURLException e) {
            return null;
        }
    }
    
    public String toAnalysisString(boolean includeRequest, boolean includeResponse) {
        StringBuilder sb = new StringBuilder();
        
        if (includeRequest) {
            sb.append("=== REQUEST ===\n")
              .append(method).append(" ").append(url).append("\n");
            
            sb.append("Headers:\n");
            requestHeaders.forEach((name, value) -> 
                sb.append(name).append(": ").append(value).append("\n"));
            
            if (requestBody != null && !requestBody.isEmpty()) {
                sb.append("\nBody:\n").append(requestBody).append("\n");
            }
        }
        
        if (includeResponse) {
            if (includeRequest) sb.append("\n");
            sb.append("=== RESPONSE ===\n")
              .append("Status: ").append(statusCode).append("\n");
            
            sb.append("Headers:\n");
            responseHeaders.forEach((name, value) -> 
                sb.append(name).append(": ").append(value).append("\n"));
            
            if (responseBody != null && !responseBody.isEmpty()) {
                sb.append("\nBody:\n").append(responseBody).append("\n");
            }
        }
        
        return sb.toString();
    }
} 