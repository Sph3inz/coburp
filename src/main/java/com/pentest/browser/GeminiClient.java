package com.pentest.browser;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import org.json.JSONObject;
import java.io.File;
import org.json.JSONArray;
import java.io.FileInputStream;
import java.util.List;
import java.util.Map;
import org.json.JSONException;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

public class GeminiClient {

    // Update endpoints with correct model name and version
    private static final String BASE_URL = "https://generativelanguage.googleapis.com/v1beta";
    private static final String MODEL_NAME = "gemini-2.0-flash";
    private static final String API_URL = BASE_URL + "/models/" + MODEL_NAME + ":generateContent";
    private static final String STREAM_API_URL = BASE_URL + "/models/" + MODEL_NAME + ":streamGenerateContent";
    private static final String FILES_API_URL = BASE_URL + "/files";
    private static final String UPLOAD_API_URL = "https://generativelanguage.googleapis.com/upload/v1beta/files";

    private List<JSONObject> chatHistory;

    public GeminiClient() {
        this.chatHistory = new ArrayList<>();
    }

    /**
     * Sends a prompt to Gemini with chat history and returns the response.
     */
    public String generateChatResponse(String apiKey, String prompt, float temperature, boolean stream) throws IOException {
        if (apiKey == null || apiKey.trim().isEmpty()) {
            throw new IOException("API key is null or empty");
        }
        if (prompt == null || prompt.trim().isEmpty()) {
            throw new IOException("Prompt is null or empty");
        }

        // Add user message to chat history
        JSONObject userMessage = new JSONObject();
        userMessage.put("role", "user");
        JSONArray userParts = new JSONArray();
        JSONObject userText = new JSONObject();
        userText.put("text", prompt);
        userParts.put(userText);
        userMessage.put("parts", userParts);
        chatHistory.add(userMessage);

        HttpURLConnection conn = null;
        try {
            String baseUrl = stream ? STREAM_API_URL : API_URL;
            URL url = new URL(baseUrl + "?key=" + apiKey + (stream ? "&alt=sse" : ""));
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setDoOutput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(60000);

            JSONObject requestBody = new JSONObject();
            requestBody.put("model", MODEL_NAME);
            requestBody.put("contents", new JSONArray(chatHistory));

            JSONObject generationConfig = new JSONObject();
            generationConfig.put("temperature", temperature);
            generationConfig.put("maxOutputTokens", 2048);
            requestBody.put("generationConfig", generationConfig);

            String requestBodyStr = requestBody.toString();
            System.out.println("Request body: " + requestBodyStr);

            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = requestBodyStr.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
                os.flush();
            }

            int responseCode = conn.getResponseCode();
            System.out.println("Response code: " + responseCode);

            if (responseCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
                String response = readResponse(conn);
                throw new IOException("API request failed (HTTP " + responseCode + "): " + response);
            }

            StringBuilder responseText = new StringBuilder();
            if (stream) {
                // Handle streaming response
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        if (line.startsWith("data: ")) {
                            String data = line.substring(6);
                            if (!"[DONE]".equals(data)) {
                                try {
                                    JSONObject chunk = new JSONObject(data);
                                    if (chunk.has("candidates")) {
                                        JSONArray candidates = chunk.getJSONArray("candidates");
                                        if (candidates.length() > 0) {
                                            JSONObject candidate = candidates.getJSONObject(0);
                                            if (candidate.has("content")) {
                                                JSONObject content = candidate.getJSONObject("content");
                                                if (content.has("parts")) {
                                                    JSONArray parts = content.getJSONArray("parts");
                                                    if (parts.length() > 0) {
                                                        JSONObject part = parts.getJSONObject(0);
                                                        if (part.has("text")) {
                                                            String text = part.getString("text");
                                                            responseText.append(text);
                                                            System.out.println("Received chunk: " + text);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } catch (JSONException e) {
                                    System.out.println("Error parsing chunk: " + data);
                                    System.out.println("Error: " + e.getMessage());
                                }
                            }
                        }
                    }
                }
            } else {
                // Handle regular response
                String response = readResponse(conn);
                JSONObject responseObj = new JSONObject(response);
                responseText.append(extractResponseText(responseObj));
            }

            String result = responseText.toString();
            if (result.isEmpty()) {
                throw new IOException("Empty response received from API");
            }

            // Add model response to chat history
            JSONObject modelMessage = new JSONObject();
            modelMessage.put("role", "model");
            JSONArray modelParts = new JSONArray();
            JSONObject modelText = new JSONObject();
            modelText.put("text", result);
            modelParts.put(modelText);
            modelMessage.put("parts", modelParts);
            chatHistory.add(modelMessage);

            return result;
        } catch (Exception e) {
            System.out.println("Error during API request: " + e.getMessage());
            e.printStackTrace();
            if (e instanceof IOException) {
                throw (IOException) e;
            }
            throw new IOException("Error processing API request: " + e.getMessage());
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }
    }

    /**
     * Clears the chat history.
     */
    public void clearChatHistory() {
        chatHistory.clear();
    }

    /**
     * Returns the last user message from chat history, or null if none exists.
     */
    public String getLastUserMessage() {
        for (int i = chatHistory.size() - 1; i >= 0; i--) {
            JSONObject message = chatHistory.get(i);
            if ("user".equals(message.getString("role"))) {
                JSONArray parts = message.getJSONArray("parts");
                if (parts.length() > 0) {
                    return parts.getJSONObject(0).getString("text");
                }
            }
        }
        return null;
    }

    /**
     * Returns the entire chat history.
     */
    public List<JSONObject> getChatHistory() {
        return new ArrayList<>(chatHistory);
    }

    private static String extractResponseText(JSONObject responseObj) throws JSONException {
        if (!responseObj.has("candidates")) {
            throw new JSONException("No 'candidates' field in response");
        }

        JSONArray candidates = responseObj.getJSONArray("candidates");
        if (candidates.length() == 0) {
            throw new JSONException("Empty candidates array in response");
        }

        JSONObject candidate = candidates.getJSONObject(0);
        if (!candidate.has("content")) {
            throw new JSONException("No 'content' field in candidate");
        }

        JSONObject content = candidate.getJSONObject("content");
        if (!content.has("parts")) {
            throw new JSONException("No 'parts' field in content");
        }

        JSONArray parts = content.getJSONArray("parts");
        if (parts.length() == 0) {
            throw new JSONException("Empty parts array in content");
        }

        JSONObject part = parts.getJSONObject(0);
        if (!part.has("text")) {
            throw new JSONException("No 'text' field in part");
        }

        return part.getString("text");
    }

    /**
     * Uploads a video file to Gemini and returns the processed video URI.
     */
    public static String uploadVideo(String apiKey, File videoFile) throws IOException, InterruptedException {
        // First validate inputs
        if (apiKey == null || apiKey.trim().isEmpty()) {
            throw new IOException("API key is null or empty");
        }
        if (!videoFile.exists() || videoFile.length() == 0) {
            throw new IOException("Video file does not exist or is empty: " + videoFile.getAbsolutePath());
        }

        // Add retry logic for file processing check
        int maxRetries = 5;
        int retryCount = 0;
        String fileUri = null;
        
        while (retryCount < maxRetries) {
            try {
                // Upload the file
                fileUri = uploadVideoFile(apiKey, videoFile);
                
                // Wait for file to be processed
                if (waitForFileProcessing(apiKey, fileUri)) {
                    return fileUri;
                }
                
                retryCount++;
                if (retryCount < maxRetries) {
                    Thread.sleep(2000); // Wait before retry
                }
            } catch (Exception e) {
                System.out.println("Upload attempt " + (retryCount + 1) + " failed: " + e.getMessage());
                retryCount++;
                if (retryCount < maxRetries) {
                    Thread.sleep(2000);
                } else {
                    throw e;
                }
            }
        }
        
        throw new IOException("Failed to process video file after " + maxRetries + " attempts");
    }

    private static String uploadVideoFile(String apiKey, File videoFile) throws IOException {
        // Initialize upload
        URL initUrl = new URL(UPLOAD_API_URL + "?key=" + apiKey);
        HttpURLConnection initConn = (HttpURLConnection) initUrl.openConnection();
        initConn.setRequestMethod("POST");
        initConn.setDoOutput(true);
        initConn.setRequestProperty("Content-Type", "application/json");
        initConn.setRequestProperty("X-Goog-Upload-Protocol", "resumable");
        initConn.setRequestProperty("X-Goog-Upload-Command", "start");
        initConn.setRequestProperty("X-Goog-Upload-Header-Content-Length", String.valueOf(videoFile.length()));
        initConn.setRequestProperty("X-Goog-Upload-Header-Content-Type", "video/mp4");

        // Create metadata
        String timestamp = String.format("%d", System.currentTimeMillis() % 1000000);
        String safeFileName = "files/video" + timestamp;
        
        JSONObject metadata = new JSONObject();
        metadata.put("name", safeFileName);
        
        JSONObject requestBody = new JSONObject();
        requestBody.put("file", metadata);

        // Send init request
        try (OutputStream os = initConn.getOutputStream()) {
            os.write(requestBody.toString().getBytes(StandardCharsets.UTF_8));
        }

        // Get upload URL
        String uploadUrl = initConn.getHeaderField("X-Goog-Upload-URL");
        if (uploadUrl == null || uploadUrl.isEmpty()) {
            throw new IOException("Failed to get upload URL");
        }

        // Upload file content
        URL resumableUrl = new URL(uploadUrl);
        HttpURLConnection uploadConn = (HttpURLConnection) resumableUrl.openConnection();
        uploadConn.setRequestMethod("POST");
        uploadConn.setDoOutput(true);
        uploadConn.setRequestProperty("Content-Length", String.valueOf(videoFile.length()));
        uploadConn.setRequestProperty("Content-Type", "application/octet-stream");
        uploadConn.setRequestProperty("X-Goog-Upload-Offset", "0");
        uploadConn.setRequestProperty("X-Goog-Upload-Command", "upload, finalize");

        try (FileInputStream fis = new FileInputStream(videoFile);
             OutputStream os = uploadConn.getOutputStream()) {
            byte[] buffer = new byte[8192];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                os.write(buffer, 0, bytesRead);
            }
        }

        // Parse response
        String response = readResponse(uploadConn);
        JSONObject responseObj = new JSONObject(response);
        
        if (responseObj.has("error")) {
            throw new IOException("API error: " + responseObj.getJSONObject("error").getString("message"));
        }
        
        return responseObj.getJSONObject("file").getString("uri");
    }

    private static boolean waitForFileProcessing(String apiKey, String fileUri) throws IOException, InterruptedException {
        int maxAttempts = 10;
        int attempt = 0;
        
        while (attempt < maxAttempts) {
            URL url = new URL(fileUri + "?key=" + apiKey);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            String response = readResponse(conn);
            
            JSONObject responseObj = new JSONObject(response);
            String state = responseObj.getString("state");
            
            if ("ACTIVE".equals(state)) {
                return true;
            } else if ("FAILED".equals(state)) {
                return false;
            }
            
            Thread.sleep(1000);
            attempt++;
        }
        
        return false;
    }

    /**
     * Sends a prompt with multiple videos to Gemini and returns the response.
     */
    public String generateMultiVideoResponse(String apiKey, String prompt, List<String> fileUris) throws IOException {
        URL url = new URL(API_URL + "?key=" + apiKey);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json");
        conn.setDoOutput(true);

        JSONObject requestBody = new JSONObject();
        requestBody.put("model", MODEL_NAME);
        
        // Create contents array starting with existing chat history
        JSONArray contents = new JSONArray(chatHistory);
        
        // Add new user message with both text and video parts
        JSONObject userMessage = new JSONObject();
        userMessage.put("role", "user");
        JSONArray userParts = new JSONArray();

        // Add text part first
        JSONObject textPart = new JSONObject();
        textPart.put("text", prompt);
        userParts.put(textPart);

        // Add file_data part for each video
        for (String fileUri : fileUris) {
            JSONObject videoPart = new JSONObject();
            JSONObject fileData = new JSONObject();
            fileData.put("mime_type", "video/mp4");
            fileData.put("file_uri", fileUri.replace("\"", ""));
            videoPart.put("file_data", fileData);
            userParts.put(videoPart);
        }

        userMessage.put("parts", userParts);
        contents.put(userMessage);
        requestBody.put("contents", contents);

        // Add generation config
        JSONObject generationConfig = new JSONObject();
        generationConfig.put("temperature", 0.7);
        generationConfig.put("maxOutputTokens", 2048);
        requestBody.put("generationConfig", generationConfig);

        System.out.println("Request body: " + requestBody.toString(2));

        try (OutputStream os = conn.getOutputStream()) {
            os.write(requestBody.toString().getBytes(StandardCharsets.UTF_8));
        }

        int responseCode = conn.getResponseCode();
        String response = readResponse(conn);
        
        System.out.println("Response code: " + responseCode);
        System.out.println("Response body: " + response);

        if (responseCode != HttpURLConnection.HTTP_OK) {
            throw new IOException("Failed to generate content for videos. Response code: " + responseCode + "\nResponse: " + response);
        }

        try {
            JSONObject responseObj = new JSONObject(response);
            if (!responseObj.has("candidates")) {
                throw new IOException("Invalid response format: " + response);
            }

            String aiContent = responseObj.getJSONArray("candidates")
                             .getJSONObject(0)
                             .getJSONObject("content")
                             .getJSONArray("parts")
                             .getJSONObject(0)
                             .getString("text");

            // Add user message to chat history
            chatHistory.add(userMessage);

            // Add model response to chat history
            JSONObject modelMessage = new JSONObject();
            modelMessage.put("role", "model");
            JSONArray modelParts = new JSONArray();
            JSONObject modelText = new JSONObject();
            modelText.put("text", aiContent);
            modelParts.put(modelText);
            modelMessage.put("parts", modelParts);
            chatHistory.add(modelMessage);

            return aiContent;
        } catch (JSONException e) {
            throw new IOException("Failed to parse response: " + e.getMessage() + "\nResponse: " + response);
        }
    }

    private static String readResponse(HttpURLConnection conn) throws IOException {
        InputStream inputStream = null;
        try {
            try {
                inputStream = conn.getInputStream();
                System.out.println("Using main input stream");
            } catch (IOException e) {
                inputStream = conn.getErrorStream();
                System.out.println("Using error stream: " + e.getMessage());
            }
            
            if (inputStream == null) {
                throw new IOException("No response data available for URL: " + conn.getURL() + ". Response code: " + conn.getResponseCode());
            }

            StringBuilder response = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            }
            String responseStr = response.toString();
            System.out.println("Raw response length: " + responseStr.length());
            return responseStr;
        } finally {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    System.err.println("Error closing response stream: " + e.getMessage());
                }
            }
        }
    }
}
