package com.pentest.browser;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class WebTrafficConfigDialog extends JDialog {
    private final WebTrafficConfig config;
    private final WebTrafficCollector collector;
    
    private JCheckBox includeRequestsCheckbox;
    private JCheckBox includeResponsesCheckbox;
    private JTextField targetDomainField;
    private JTextField subdomainsField;
    private JCheckBox flushDataCheckbox;
    private JTextField maxTokensField;
    private JCheckBox includeAllSubdomainsCheckbox;
    private JLabel tokenCountLabel;
    
    public WebTrafficConfigDialog(java.awt.Frame owner, WebTrafficConfig config, WebTrafficCollector collector) {
        super(owner, "Web Traffic Configuration", true);
        this.config = config;
        this.collector = collector;
        initializeUI();
    }
    
    private void initializeUI() {
        setLayout(new BorderLayout());
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        mainPanel.setBackground(new Color(28, 32, 36));
        
        // Traffic Options Panel
        JPanel optionsPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        optionsPanel.setOpaque(false);
        optionsPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(45, 49, 58)),
            "Traffic Options",
            javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
            javax.swing.border.TitledBorder.DEFAULT_POSITION,
            null,
            new Color(200, 200, 200)
        ));
        
        includeRequestsCheckbox = new JCheckBox("Include Requests", config.isIncludeRequests());
        includeResponsesCheckbox = new JCheckBox("Include Responses", config.isIncludeResponses());
        includeAllSubdomainsCheckbox = new JCheckBox("Include All Subdomains", config.isIncludeAllSubdomains());
        
        styleCheckbox(includeRequestsCheckbox);
        styleCheckbox(includeResponsesCheckbox);
        styleCheckbox(includeAllSubdomainsCheckbox);
        
        optionsPanel.add(includeRequestsCheckbox);
        optionsPanel.add(includeResponsesCheckbox);
        optionsPanel.add(includeAllSubdomainsCheckbox);
        mainPanel.add(optionsPanel);
        mainPanel.add(Box.createVerticalStrut(10));
        
        // Domain Configuration Panel
        JPanel domainPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        domainPanel.setOpaque(false);
        domainPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(45, 49, 58)),
            "Domain Configuration",
            javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
            javax.swing.border.TitledBorder.DEFAULT_POSITION,
            null,
            new Color(200, 200, 200)
        ));
        
        targetDomainField = new JTextField(config.getTargetDomain());
        targetDomainField.setBorder(BorderFactory.createCompoundBorder(
            targetDomainField.getBorder(),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
        subdomainsField = new JTextField(String.join(", ", config.getSubdomains()));
        subdomainsField.setBorder(BorderFactory.createCompoundBorder(
            subdomainsField.getBorder(),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
        domainPanel.add(new JLabel("Target Domain:"));
        domainPanel.add(targetDomainField);
        domainPanel.add(new JLabel("Subdomains (comma-separated):"));
        domainPanel.add(subdomainsField);
        domainPanel.add(includeAllSubdomainsCheckbox);
        
        mainPanel.add(domainPanel);
        mainPanel.add(Box.createVerticalStrut(10));
        
        // Token Management Panel
        JPanel tokenPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        tokenPanel.setOpaque(false);
        tokenPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(45, 49, 58)),
            "Token Management",
            javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
            javax.swing.border.TitledBorder.DEFAULT_POSITION,
            null,
            new Color(200, 200, 200)
        ));
        
        maxTokensField = new JTextField(String.valueOf(config.getMaxTokens()));
        maxTokensField.setBorder(BorderFactory.createCompoundBorder(
            maxTokensField.getBorder(),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
        flushDataCheckbox = new JCheckBox("Flush Data", config.isFlushData());
        tokenCountLabel = new JLabel("Current Token Count: " + collector.getCurrentTokenCount());
        
        tokenPanel.add(new JLabel("Max Tokens:"));
        tokenPanel.add(maxTokensField);
        tokenPanel.add(flushDataCheckbox);
        tokenPanel.add(tokenCountLabel);
        
        mainPanel.add(tokenPanel);
        mainPanel.add(Box.createVerticalStrut(10));
        
        // Buttons Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setOpaque(false);
        
        JButton saveButton = new JButton("Save");
        JButton cancelButton = new JButton("Cancel");
        styleButton(saveButton);
        styleButton(cancelButton);
        
        saveButton.addActionListener(e -> {
            saveConfiguration();
            dispose();
        });
        
        cancelButton.addActionListener(e -> dispose());
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        mainPanel.add(buttonPanel);
        
        // Add panels to dialog
        setContentPane(mainPanel);
        pack();
        setLocationRelativeTo(getOwner());
    }
    
    private void saveConfiguration() {
        config.setIncludeRequests(includeRequestsCheckbox.isSelected());
        config.setIncludeResponses(includeResponsesCheckbox.isSelected());
        config.setIncludeAllSubdomains(includeAllSubdomainsCheckbox.isSelected());
        
        config.setTargetDomain(targetDomainField.getText().trim());
        
        String[] subdomains = subdomainsField.getText().split(",");
        List<String> trimmedSubdomains = Arrays.stream(subdomains)
            .map(String::trim)
            .filter(s -> !s.isEmpty())
            .collect(Collectors.toList());
        config.setSubdomains(trimmedSubdomains);
        
        try {
            long maxTokens = Long.parseLong(maxTokensField.getText().trim());
            config.setMaxTokens(maxTokens);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                "Invalid max tokens value. Using previous value: " + config.getMaxTokens(),
                "Invalid Input",
                JOptionPane.WARNING_MESSAGE);
        }
        
        config.setFlushData(flushDataCheckbox.isSelected());
        
        if (flushDataCheckbox.isSelected()) {
            collector.flushData();
            tokenCountLabel.setText("Current Token Count: 0");
        }
    }
    
    private void styleCheckbox(JCheckBox checkbox) {
        checkbox.setForeground(new Color(200, 200, 200));
        checkbox.setBackground(new Color(28, 32, 36));
    }
    
    private void styleTextField(JTextField textField) {
        textField.setBackground(new Color(45, 49, 58));
        textField.setForeground(new Color(200, 200, 200));
        textField.setCaretColor(new Color(200, 200, 200));
        textField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(45, 49, 58)),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
    }
    
    private void styleButton(JButton button) {
        button.setBackground(new Color(45, 49, 58));
        button.setForeground(new Color(200, 200, 200));
        button.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(60, 63, 65)),
            BorderFactory.createEmptyBorder(5, 15, 5, 15)
        ));
        button.setFocusPainted(false);
        
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(60, 63, 65));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(45, 49, 58));
            }
        });
    }
} 